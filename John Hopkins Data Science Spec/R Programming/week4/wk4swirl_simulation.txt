| Make sure to save your script before you type submit().

> 

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new,
| call yourself something unique.

What shall I call you? Sean

| Would you like to continue with one of these lessons?

1: R Programming Functions
2: R Programming Logic
3: R Programming Subsetting Vectors
4: No. Let me start something new.

Selection: 4

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 2

| OK. I'm opening the swirl courses web page in your browser.

| Leaving swirl now. Type swirl() to resume.

> swirl()

| Welcome to swirl! Please sign in. If you've been here before, use the same name as you did then. If you are new,
| call yourself something unique.

What shall I call you? Sean

| Would you like to continue with one of these lessons?

1: R Programming Functions
2: R Programming Logic
3: R Programming Subsetting Vectors
4: No. Let me start something new.

Selection: 4

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers    
 4: Vectors                    5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                      9: Functions               
10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics           


Selection: 13

  |                                                                                                             |   0%

| One of the great advantages of using a statistical programming language like R is its vast collection of tools for
| simulating random numbers.

...

  |===                                                                                                          |   3%
| This lesson assumes familiarity with a few common probability distributions, but these topics will only be discussed
| with respect to random number generation. Even if you have no prior experience with these concepts, you should be
| able to complete the lesson and understand the main ideas.

...

  |=======                                                                                                      |   6%
| The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.

> ?sample()

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Use '?sample' to pull up the documentation for the sample() function.

> ?sample

| You're the best!

  |==========                                                                                                   |   9%
| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6,4,replace = TRUE)
[1] 3 5 5 1

| You are amazing!

  |=============                                                                                                |  12%
| Now repeat the command to see how your result differs. (The probability of rolling the exact same result is (1/6)^4
| = 0.00077, which is pretty small!)

> sample(1:6,4,replace = TRUE)
[1] 6 2 3 5

| Great job!

  |=================                                                                                            |  15%
| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH replacement.
| Sampling with replacement simply means that each number is "replaced" after it is selected, so that the same number
| can show up more than once. This is what we want here, since what you roll on one die shouldn't affect what you roll
| on any of the others.

...

  |====================                                                                                         |  18%
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off the
| 'replace' argument.

> sample(1:20,10,replace = FALSE)
 [1]  9 18 20 10  4  5  7 17 15 16

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Type sample(1:20, 10) to sample 10 numbers between 1 and 20, without replacement.

> sample(1:20,10)
 [1] 11  2  3 15 12 17  8  7 14 20

| You got it right!

  |=======================                                                                                      |  21%
| Since the last command sampled without replacement, no number appears more than once in the output.

...

  |==========================                                                                                   |  24%
| LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a look at
| it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

| That's the answer I was looking for.

  |==============================                                                                               |  27%
| The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try
| sample(LETTERS) to permute all 26 letters of the English alphabet.

> sample(LETTERS)
 [1] "N" "Z" "D" "K" "X" "C" "Y" "T" "J" "W" "Q" "A" "E" "L" "H" "M" "I" "B" "R" "F" "S" "O" "U" "G" "V" "P"

| You are doing so well!

  |=================================                                                                            |  30%
| This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to
| sample() is not specified, R takes a sample equal in size to the vector from which you are sampling.

...

  |====================================                                                                         |  33%
| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3 probability
| of landing 'tails' and a 0.7 probability of landing 'heads'.

...

  |========================================                                                                     |  36%
| Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100 from the
| vector c(0,1), with replacement. Since the coin is unfair, we must attach specific probabilities to the values 0
| (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the result to a new variable called flips.

> sample(0:1,100,replace=TRUE,prob=c(0.3,0.7))
  [1] 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 1 0 1 1 0 0 1 1 0 0 1 1 1 1 1 1
 [58] 1 1 1 1 0 1 1 0 1 1 0 1 1 1 0 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 0 0 1 0 1 1 1 1 1 0 0 1 0

| You almost had it, but not quite. Try again. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <- sample(c(0,1), 100,
| replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(0:1,100,replace=TRUE,prob=c(0.3,0.7))

| That's not the answer I was looking for, but try again. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the result: flips <- sample(c(0,1), 100,
| replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))

| That's correct!

  |===========================================                                                                  |  39%
| View the contents of the flips variable.

> flips
  [1] 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 1 0 0 1 0 1 1 0 0 0 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1
 [58] 1 1 1 0 1 1 0 0 1 1 0 0 1 0 1 1 0 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 0 1 1 1

| That's a job well done!

  |==============================================                                                               |  42%
| Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin
| flips to have the value 1. Count the actual number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 72

| Excellent work!

  |==================================================                                                           |  45%
| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can use
| rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using ?rbinom.

> ?rbinom

| You're the best!

  |=====================================================                                                        |  48%
| Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a p*** (for
| "probability"), and q*** (for "quantile"). We are most interested in the r*** functions in this lesson, but I
| encourage you to explore the others on your own.

...

  |========================================================                                                     |  52%
| A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials'
| (coin flips). Therefore, we can generate a single random variable that represents the number of heads in 100 flips
| of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify the probability of 'success'
| (heads) and NOT the probability of 'failure' (tails). Try it now.

> rbinom(1,size=100,prob=0.7)
[1] 64

| You are quite good my friend!

  |===========================================================                                                  |  55%
| Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with success
| probability of 0.7. Give it a try, assigning the result to a new variable called flips2.

> flips2 <- rbinom(100,size=100,prob=0.7)

| Give it another try. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(n=100,size=100,prob=0.7)

| Not exactly. Give it another go. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

> flips2 <- rbinom(n=100,size=1,prob=0.7)

| Keep up the great work!

  |===============================================================                                              |  58%
| View the contents of flips2.

> flips2
  [1] 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1
 [58] 1 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 0 0 0

| You got it!

  |==================================================================                                           |  61%
| Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!

> sum(flips2)
[1] 73

| Your dedication is inspiring!

  |=====================================================================                                        |  64%
| Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull up the
| documentation for rnorm() now.

> ?rnorm

| You are amazing!

  |=========================================================================                                    |  67%
| The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage' section in
| the documentation, the default values for the 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus,
| rnorm(10) will generate 10 random numbers from a standard normal distribution. Give it a try.

> rnorm(10)
 [1]  1.0879131  0.1518793  0.1825629  0.3689053  0.7581918 -0.5588062 -0.5483042 -1.3019701  0.1640232 -0.2980847

| Excellent job!

  |============================================================================                                 |  70%
| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10,mean=100,sd=25)
 [1] 154.48112 100.04684  99.26692  45.84817  96.07835  87.98454  94.23555  64.17520  99.66191 118.83624

| Nice work!

  |===============================================================================                              |  73%
| Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated from a
| Poisson distribution with mean 10? Let's start with one group of 5 numbers, then I'll show you how to repeat the
| operation 100 times in a convenient and compact way.

...

  |===================================================================================                          |  76%
| Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois() if you
| need help.

> ?rpois
> rpois(5,10)
[1]  9 10  9  8 15

| You are amazing!

  |======================================================================================                       |  79%
| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new variable called
| my_pois.

> my_pois <- replicate(100,rpois(5,10))

| Perseverance, that's the answer.

  |=========================================================================================                    |  82%
| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20]
[1,]   11    8    4   15    9   13    7    8   11    14     9    15    16     9    15     8    10     9     8     7
[2,]    6   13    8    7    9   15   10   10    7     5     7     6     7    10     8    10    10    12     8     5
[3,]   15    7   12   10   12   14    5   14   13     9     8    10     6     9    12    10    12    10    10     9
[4,]   11   15    9   13   15   12    8   14   11     9    11     8     8     7     8     9    14    12    10    15
[5,]    6   11   13   10    9   11   10   15   13     9     9    14    11     5     7    14     7     9    11     4
     [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] [,39]
[1,]     7    14     8    15    12    10     7     9    11    14    14    14     9     7     6    18     8     8    12
[2,]     7     8     7     9     7     8     8    11     7    10     8     5    13    12    17     7    13    10    15
[3,]     8     9     5    13    15     6    11     7    12     7    10    11     4     9     9    10    15     9     6
[4,]    15    10     7    14    14     8    16     8     8     8     8     8    11    10     9     9    10    10     9
[5,]    15    12    12     8    11     6     7     9     9    12     9     5    11    10     8    15    10    14    11
     [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58]
[1,]    13    16    20    11    12     5    18    12    11     9    10    12     9    14    11     3     7    11     5
[2,]     4     5    11    13     9     8     8    10    12     8    14    14    10    12    10     9    13    11    12
[3,]    12     8     8     7     8     2    10    12    10    18     6     8    11     9     7    13    11    11    13
[4,]    14    15     8    14    16    11    10     9     8     4    17     7    11    10    10    16     7     8    11
[5,]    11     8    12    10    10    10    11    11    11     6    14    11     9     7    14    14     9    13     8
     [,59] [,60] [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] [,75] [,76] [,77]
[1,]     8    14    12     9    10    11    10    15     9     8     8     8    18    13    12    16     9    10     6
[2,]    11     9     7    13     8     7     5    11     7     8    10     5    11    13    12    15    13     5    12
[3,]     9    10    10     7     9     8    10    14    11    12    10     8     3    15    12     8     6    12     9
[4,]     8    13    11     3     8     8    10     9     9    13    12    10    10    11    11     3     5     9     7
[5,]    11     9    11    12    11    13     7    10    10     5     5    14     8     9     9    10    11    10     7
     [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96]
[1,]     5    13     7     9    13     8    11     9     9     9     9     5    16    15     9    15    10     9    11
[2,]    15    12    13     9    15    10     9    14     8     5    12    11     5    13    11    11    14    19     8
[3,]    11     9     9    11    12     5    13    10    11    10     7     5    12     6     7     7    11    11    12
[4,]    13    11     5    13    13     8    13     6     7    10     8     8    16    13    12     8    10    14    11
[5,]     5    12    17     9    11    11    14    11    14     8    12    10     6    12    17    10    14    10    12
     [,97] [,98] [,99] [,100]
[1,]    12     9    11     11
[2,]     7    13     6      5
[3,]    16    10    12     10
[4,]    10    11    10     12
[5,]     9     5    13     12

| You are really on a roll!

  |============================================================================================                 |  85%
| replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson distribution
| with mean 10. Now we can find the mean of each column in my_pois using the colMeans() function. Store the result in
| a variable called cm.

> cm <- colMeans(my_pois)

| All that practice is paying off!

  |================================================================================================             |  88%
| And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).

> hist(cm)

| That's the answer I was looking for.

  |===================================================================================================          |  91%
| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work, but
| that's a lesson for another day!

...

  |======================================================================================================       |  94%
| All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared
| (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

...

  |==========================================================================================================   |  97%
| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I encourage you
| to explore these and other functions further on your own.

...

  |=============================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 1

| That's the answer I was looking for.

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Functions
2: R Programming Logic
3: R Programming Subsetting Vectors
4: No. Let me start something new.

Selection: 
