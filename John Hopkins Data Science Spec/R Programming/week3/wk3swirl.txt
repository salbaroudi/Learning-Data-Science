
$crescent
[1] "integer"

$triangle
[1] "integer"

$icon
[1] "integer"

$animate
[1] "integer"

$text
[1] "integer"

$topleft
[1] "factor"

$botright
[1] "factor"


| Perseverance, that's the answer.

  |=============================                                                                                 |  26%
| The 'l' in 'lapply' stands for 'list'. Type class(cls_list) to confirm
| that lapply() returned a list.

> class(cls_list)
[1] "list"

| Perseverance, that's the answer.

  |===============================                                                                               |  28%
| As expected, we got a list of length 30 -- one element for each
| variable/column. The output would be considerably more compact if we
| could represent it as a vector instead of a list.

...

  |=================================                                                                             |  30%
| You may remember from a previous lesson that lists are most helpful for
| storing multiple classes of data. In this case, since every element of
| the list returned by lapply() is a character vector of length one (i.e.
| "integer" and "vector"), cls_list can be simplified to a character
| vector. To do this manually, type as.character(cls_list).

> as.character(cls_list)
 [1] "factor"  "integer" "integer" "integer" "integer" "integer" "integer"
 [8] "integer" "integer" "integer" "integer" "integer" "integer" "integer"
[15] "integer" "integer" "integer" "factor"  "integer" "integer" "integer"
[22] "integer" "integer" "integer" "integer" "integer" "integer" "integer"
[29] "factor"  "factor" 

| You are amazing!

  |===================================                                                                           |  32%
| sapply() allows you to automate this process by calling lapply() behind
| the scenes, but then attempting to simplify (hence the 's' in 'sapply')
| the result for you. Use sapply() the same way you used lapply() to get
| the class of each column of the flags dataset and store the result in
| cls_vect. If you need help, type ?sapply to bring up the documentation.

> cls_vect <- sapply(flags,class)

| Great job!

  |=====================================                                                                         |  34%
| Use class(cls_vect) to confirm that sapply() simplified the result to a
| character vector.

> class(cls_vect)
[1] "character"

| Nice work!

  |========================================                                                                      |  36%
| In general, if the result is a list where every element is of length
| one, then sapply() returns a vector. If the result is a list where
| every element is a vector of the same length (> 1), sapply() returns a
| matrix. If sapply() can't figure things out, then it just returns a
| list, no different from what lapply() would give you.

...

  |==========================================                                                                    |  38%
| Let's practice using lapply() and sapply() some more!

...

  |============================================                                                                  |  40%
| Columns 11 through 17 of our dataset are indicator variables, each
| representing a different color. The value of the indicator variable is
| 1 if the color is present in a country's flag and 0 otherwise.

...

  |==============================================                                                                |  42%
| Therefore, if we want to know the total number of countries (in our
| dataset) with, for example, the color orange on their flag, we can just
| add up all of the 1s and 0s in the 'orange' column. Try
| sum(flags$orange) to see this.

> sum(flags$orange)
[1] 26

| You are quite good my friend!

  |================================================                                                              |  44%
| Now we want to repeat this operation for each of the colors recorded in
| the dataset.

...

  |===================================================                                                           |  46%
| First, use flag_colors <- flags[, 11:17] to extract the columns
| containing the color data and store them in a new data frame called
| flag_colors. (Note the comma before 11:17. This subsetting command
| tells R that we want all rows, but only columns 11 through 17.)

> flag_colors <- flags[,11:17]

| You nailed it! Good job!

  |=====================================================                                                         |  48%
| Use the head() function to look at the first 6 lines of flag_colors.

> head(flag_colors)
  red green blue gold white black orange
1   1     1    0    1     1     1      0
2   1     0    0    1     0     1      0
3   1     1    0    0     1     0      0
4   1     0    1    1     1     0      1
5   1     0    1    1     0     0      0
6   1     0    0    1     0     1      0

| You are quite good my friend!

  |=======================================================                                                       |  50%
| To get a list containing the sum of each column of flag_colors, call
| the lapply() function with two arguments. The first argument is the
| object over which we are looping (i.e. flag_colors) and the second
| argument is the name of the function we wish to apply to each column
| (i.e. sum). Remember that the second argument is just the name of the
| function with no parentheses, etc.

> lapply(flag_colors,sum)
$red
[1] 153

$green
[1] 91

$blue
[1] 99

$gold
[1] 91

$white
[1] 146

$black
[1] 52

$orange
[1] 26


| That's a job well done!

  |=========================================================                                                     |  52%
| This tells us that of the 194 flags in our dataset, 153 contain the
| color red, 91 contain green, 99 contain blue, and so on.

...

  |===========================================================                                                   |  54%
| The result is a list, since lapply() always returns a list. Each
| element of this list is of length one, so the result can be simplified
| to a vector by calling sapply() instead of lapply(). Try it now.

> sapply(flag_colors,sum)
   red  green   blue   gold  white  black orange 
   153     91     99     91    146     52     26 

| Perseverance, that's the answer.

  |==============================================================                                                |  56%
| Perhaps it's more informative to find the proportion of flags (out of
| 194) containing each color. Since each column is just a bunch of 1s and
| 0s, the arithmetic mean of each column will give us the proportion of
| 1s. (If it's not clear why, think of a simpler situation where you have
| three 1s and two 0s -- (1 + 1 + 1 + 0 + 0)/5 = 3/5 = 0.6).

...

  |================================================================                                              |  58%
| Use sapply() to apply the mean() function to each column of
| flag_colors. Remember that the second argument to sapply() should just
| specify the name of the function (i.e. mean) that you want to apply.

> sapply(flag_colors,mean)
      red     green      blue      gold     white     black    orange 
0.7886598 0.4690722 0.5103093 0.4690722 0.7525773 0.2680412 0.1340206 

| Great job!

  |==================================================================                                            |  60%
| In the examples we've looked at so far, sapply() has been able to
| simplify the result to vector. That's because each element of the list
| returned by lapply() was a vector of length one. Recall that sapply()
| instead returns a matrix when each element of the list returned by
| lapply() is a vector of the same length (> 1).

...

  |====================================================================                                          |  62%
| To illustrate this, let's extract columns 19 through 23 from the flags
| dataset and store the result in a new data frame called flag_shapes.
| flag_shapes <- flags[, 19:23] will do it.

> flag_shapes <- flags[, 19:23]

| You are doing so well!

  |======================================================================                                        |  64%
| Each of these columns (i.e. variables) represents the number of times a
| particular shape or design appears on a country's flag. We are
| interested in the minimum and maximum number of times each shape or
| design appears.

...

  |=========================================================================                                     |  66%
| The range() function returns the minimum and maximum of its first
| argument, which should be a numeric vector. Use lapply() to apply the
| range function to each column of flag_shapes. Don't worry about storing
| the result in a new variable. By now, we know that lapply() always
| returns a list.

> lapply(flag_shapes,range)
$circles
[1] 0 4

$crosses
[1] 0 2

$saltires
[1] 0 1

$quarters
[1] 0 4

$sunstars
[1]  0 50


| That's correct!

  |===========================================================================                                   |  68%
| Do the same operation, but using sapply() and store the result in a
| variable called shape_mat.

> shape_mat <- sapply(flag_shapes,range)

| Excellent job!

  |=============================================================================                                 |  70%
| View the contents of shape_mat.

> shape_mat
     circles crosses saltires quarters sunstars
[1,]       0       0        0        0        0
[2,]       4       2        1        4       50

| You're the best!

  |===============================================================================                               |  72%
| Each column of shape_mat gives the minimum (row 1) and maximum (row 2)
| number of times its respective shape appears in different flags.

...

  |=================================================================================                             |  74%
| Use the class() function to confirm that shape_mat is a matrix.

> class(shape_mat)
[1] "matrix"

| You are amazing!

  |====================================================================================                          |  76%
| As we've seen, sapply() always attempts to simplify the result given by
| lapply(). It has been successful in doing so for each of the examples
| we've looked at so far. Let's look at an example where sapply() can't
| figure out how to simplify the result and thus returns a list, no
| different from lapply().

...

  |======================================================================================                        |  78%
| When given a vector, the unique() function returns a vector with all
| duplicate elements removed. In other words, unique() returns a vector
| of only the 'unique' elements. To see how it works, try unique(c(3, 4,
| 5, 5, 5, 6, 6)).

> unique(c(3,4,5,5,5,6,6))
[1] 3 4 5 6

| All that practice is paying off!

  |========================================================================================                      |  80%
| We want to know the unique values for each variable in the flags
| dataset. To accomplish this, use lapply() to apply the unique()
| function to each column in the flags dataset, storing the result in a
| variable called unique_vals.

> unique_vals <- lapply(flags,unique)

| Excellent job!

  |==========================================================================================                    |  82%
| Print the value of unique_vals to the console.

> unique_vals
$name
  [1] Afghanistan              Albania                 
  [3] Algeria                  American-Samoa          
  [5] Andorra                  Angola                  
  [7] Anguilla                 Antigua-Barbuda         
  [9] Argentina                Argentine               
 [11] Australia                Austria                 
 [13] Bahamas                  Bahrain                 
 [15] Bangladesh               Barbados                
 [17] Belgium                  Belize                  
 [19] Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                 
 [23] Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                  
 [27] Bulgaria                 Burkina                 
 [29] Burma                    Burundi                 
 [31] Cameroon                 Canada                  
 [33] Cape-Verde-Islands       Cayman-Islands          
 [35] Central-African-Republic Chad                    
 [37] Chile                    China                   
 [39] Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands            
 [43] Costa-Rica               Cuba                    
 [45] Cyprus                   Czechoslovakia          
 [47] Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                   
 [53] El-Salvador              Equatorial-Guinea       
 [55] Ethiopia                 Faeroes                 
 [57] Falklands-Malvinas       Fiji                    
 [59] Finland                  France                  
 [61] French-Guiana            French-Polynesia        
 [63] Gabon                    Gambia                  
 [65] Germany-DDR              Germany-FRG             
 [67] Ghana                    Gibraltar               
 [69] Greece                   Greenland               
 [71] Grenada                  Guam                    
 [73] Guatemala                Guinea                  
 [75] Guinea-Bissau            Guyana                  
 [77] Haiti                    Honduras                
 [79] Hong-Kong                Hungary                 
 [81] Iceland                  India                   
 [83] Indonesia                Iran                    
 [85] Iraq                     Ireland                 
 [87] Israel                   Italy                   
 [89] Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                  
 [93] Kampuchea                Kenya                   
 [95] Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                 
 [99] Lesotho                  Liberia                 
[101] Libya                    Liechtenstein           
[103] Luxembourg               Malagasy                
[105] Malawi                   Malaysia                
[107] Maldive-Islands          Mali                    
[109] Malta                    Marianas                
[111] Mauritania               Mauritius               
[113] Mexico                   Micronesia              
[115] Monaco                   Mongolia                
[117] Montserrat               Morocco                 
[119] Mozambique               Nauru                   
[121] Nepal                    Netherlands             
[123] Netherlands-Antilles     New-Zealand             
[125] Nicaragua                Niger                   
[127] Nigeria                  Niue                    
[129] North-Korea              North-Yemen             
[131] Norway                   Oman                    
[133] Pakistan                 Panama                  
[135] Papua-New-Guinea         Parguay                 
[137] Peru                     Philippines             
[139] Poland                   Portugal                
[141] Puerto-Rico              Qatar                   
[143] Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                
[147] Saudi-Arabia             Senegal                 
[149] Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands         
[153] Somalia                  South-Africa            
[155] South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka               
[159] St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent              
[163] Sudan                    Surinam                 
[165] Swaziland                Sweden                  
[167] Switzerland              Syria                   
[169] Taiwan                   Tanzania                
[171] Thailand                 Togo                    
[173] Tonga                    Trinidad-Tobago         
[175] Tunisia                  Turkey                  
[177] Turks-Cocos-Islands      Tuvalu                  
[179] UAE                      Uganda                  
[181] UK                       Uruguay                 
[183] US-Virgin-Isles          USA                     
[185] USSR                     Vanuatu                 
[187] Vatican-City             Venezuela               
[189] Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143
 [12]    31    23   113    47  1099   600  8512     6   111   274   678
 [23]    28   474  9976     4   623  1284   757  9561  1139     2   342
 [34]    51   115     9   128    43    22    49   284  1001    21  1222
 [45]    12    18   337   547    91   268    10   108   249   239   132
 [56]  2176   109   246    36   215   112    93   103  3268  1904  1648
 [67]   435    70   301   323    11   372    98   181   583   236    30
 [78]  1760     3   587   118   333  1240  1031  1973  1566   447   783
 [89]   140    41  1267   925   121   195   324   212   804    76   463
[100]   407  1285   300   313    92   237    26  2150   196    72   637
[111]  1221    99   288   505    66  2506    63    17   450   185   945
[122]   514    57     5   164   781   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9
[15]   35    4   24    2   11 1008    5   47   31   54   17   61   14  684
[29]  157   39   57  118   13   77   12   56   18   84   48   36   22   29
[43]   38   49   45  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Nice work!

  |============================================================================================                  |  84%
| Since unique_vals is a list, you can use what you've learned to
| determine the length of each element of unique_vals (i.e. the number of
| unique values for each variable). Simplify the result, if possible.
| Hint: Apply the length() function to each element of unique_vals.

> sapply(unique_vals,length)
      name   landmass       zone       area population   language 
       194          6          4        136         48         10 
  religion       bars    stripes    colours        red      green 
         8          5         12          8          2          2 
      blue       gold      white      black     orange    mainhue 
         2          2          2          2          2          8 
   circles    crosses   saltires   quarters   sunstars   crescent 
         4          3          2          3         14          2 
  triangle       icon    animate       text    topleft   botright 
         2          2          2          2          7          8 

| You got it right!

  |===============================================================================================               |  86%
| The fact that the elements of the unique_vals list are all vectors of
| *different* length poses a problem for sapply(), since there's no
| obvious way of simplifying the result.

...

  |=================================================================================================             |  88%
| Use sapply() to apply the unique() function to each column of the flags
| dataset to see that you get the same unsimplified list that you got
| from lapply().

> sapply(unique_vals,length)
      name   landmass       zone       area population   language 
       194          6          4        136         48         10 
  religion       bars    stripes    colours        red      green 
         8          5         12          8          2          2 
      blue       gold      white      black     orange    mainhue 
         2          2          2          2          2          8 
   circles    crosses   saltires   quarters   sunstars   crescent 
         4          3          2          3         14          2 
  triangle       icon    animate       text    topleft   botright 
         2          2          2          2          7          8 

| Not exactly. Give it another go. Or, type info() for more options.

| Use sapply(flags, unique) to apply the unique function to each column
| of flags, failing to simplify the result.

> sapply(flags,length)
      name   landmass       zone       area population   language 
       194        194        194        194        194        194 
  religion       bars    stripes    colours        red      green 
       194        194        194        194        194        194 
      blue       gold      white      black     orange    mainhue 
       194        194        194        194        194        194 
   circles    crosses   saltires   quarters   sunstars   crescent 
       194        194        194        194        194        194 
  triangle       icon    animate       text    topleft   botright 
       194        194        194        194        194        194 

| Give it another try. Or, type info() for more options.

| Use sapply(flags, unique) to apply the unique function to each column
| of flags, failing to simplify the result.

> sapply(flags,unique)
$name
  [1] Afghanistan              Albania                 
  [3] Algeria                  American-Samoa          
  [5] Andorra                  Angola                  
  [7] Anguilla                 Antigua-Barbuda         
  [9] Argentina                Argentine               
 [11] Australia                Austria                 
 [13] Bahamas                  Bahrain                 
 [15] Bangladesh               Barbados                
 [17] Belgium                  Belize                  
 [19] Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                 
 [23] Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                  
 [27] Bulgaria                 Burkina                 
 [29] Burma                    Burundi                 
 [31] Cameroon                 Canada                  
 [33] Cape-Verde-Islands       Cayman-Islands          
 [35] Central-African-Republic Chad                    
 [37] Chile                    China                   
 [39] Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands            
 [43] Costa-Rica               Cuba                    
 [45] Cyprus                   Czechoslovakia          
 [47] Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                   
 [53] El-Salvador              Equatorial-Guinea       
 [55] Ethiopia                 Faeroes                 
 [57] Falklands-Malvinas       Fiji                    
 [59] Finland                  France                  
 [61] French-Guiana            French-Polynesia        
 [63] Gabon                    Gambia                  
 [65] Germany-DDR              Germany-FRG             
 [67] Ghana                    Gibraltar               
 [69] Greece                   Greenland               
 [71] Grenada                  Guam                    
 [73] Guatemala                Guinea                  
 [75] Guinea-Bissau            Guyana                  
 [77] Haiti                    Honduras                
 [79] Hong-Kong                Hungary                 
 [81] Iceland                  India                   
 [83] Indonesia                Iran                    
 [85] Iraq                     Ireland                 
 [87] Israel                   Italy                   
 [89] Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                  
 [93] Kampuchea                Kenya                   
 [95] Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                 
 [99] Lesotho                  Liberia                 
[101] Libya                    Liechtenstein           
[103] Luxembourg               Malagasy                
[105] Malawi                   Malaysia                
[107] Maldive-Islands          Mali                    
[109] Malta                    Marianas                
[111] Mauritania               Mauritius               
[113] Mexico                   Micronesia              
[115] Monaco                   Mongolia                
[117] Montserrat               Morocco                 
[119] Mozambique               Nauru                   
[121] Nepal                    Netherlands             
[123] Netherlands-Antilles     New-Zealand             
[125] Nicaragua                Niger                   
[127] Nigeria                  Niue                    
[129] North-Korea              North-Yemen             
[131] Norway                   Oman                    
[133] Pakistan                 Panama                  
[135] Papua-New-Guinea         Parguay                 
[137] Peru                     Philippines             
[139] Poland                   Portugal                
[141] Puerto-Rico              Qatar                   
[143] Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                
[147] Saudi-Arabia             Senegal                 
[149] Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands         
[153] Somalia                  South-Africa            
[155] South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka               
[159] St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent              
[163] Sudan                    Surinam                 
[165] Swaziland                Sweden                  
[167] Switzerland              Syria                   
[169] Taiwan                   Tanzania                
[171] Thailand                 Togo                    
[173] Tonga                    Trinidad-Tobago         
[175] Tunisia                  Turkey                  
[177] Turks-Cocos-Islands      Tuvalu                  
[179] UAE                      Uganda                  
[181] UK                       Uruguay                 
[183] US-Virgin-Isles          USA                     
[185] USSR                     Vanuatu                 
[187] Vatican-City             Venezuela               
[189] Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143
 [12]    31    23   113    47  1099   600  8512     6   111   274   678
 [23]    28   474  9976     4   623  1284   757  9561  1139     2   342
 [34]    51   115     9   128    43    22    49   284  1001    21  1222
 [45]    12    18   337   547    91   268    10   108   249   239   132
 [56]  2176   109   246    36   215   112    93   103  3268  1904  1648
 [67]   435    70   301   323    11   372    98   181   583   236    30
 [78]  1760     3   587   118   333  1240  1031  1973  1566   447   783
 [89]   140    41  1267   925   121   195   324   212   804    76   463
[100]   407  1285   300   313    92   237    26  2150   196    72   637
[111]  1221    99   288   505    66  2506    63    17   450   185   945
[122]   514    57     5   164   781   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9
[15]   35    4   24    2   11 1008    5   47   31   54   17   61   14  684
[29]  157   39   57  118   13   77   12   56   18   84   48   36   22   29
[43]   38   49   45  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Perseverance, that's the answer.

  |===================================================================================================           |  90%
| Occasionally, you may need to apply a function that is not yet defined,
| thus requiring you to write your own. Writing functions in R is beyond
| the scope of this lesson, but let's look at a quick example of how you
| might do so in the context of loop functions.

...

  |=====================================================================================================         |  92%
| Pretend you are interested in only the second item from each element of
| the unique_vals list that you just created. Since each element of the
| unique_vals list is a vector and we're not aware of any built-in
| function in R that returns the second element of a vector, we will
| construct our own function.

...

  |=======================================================================================================       |  94%
| lapply(unique_vals, function(elem) elem[2]) will return a list
| containing the second item from each element of the unique_vals list.
| Note that our function takes one argument, elem, which is just a 'dummy
| variable' that takes on the value of each element of unique_vals, in
| turn.

> 
> lapply(unique_vals, function(elem) elem[2])
$name
[1] Albania
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 3

$zone
[1] 3

$area
[1] 29

$population
[1] 3

$language
[1] 6

$religion
[1] 6

$bars
[1] 2

$stripes
[1] 0

$colours
[1] 3

$red
[1] 0

$green
[1] 0

$blue
[1] 1

$gold
[1] 0

$white
[1] 0

$black
[1] 0

$orange
[1] 1

$mainhue
[1] red
Levels: black blue brown gold green orange red white

$circles
[1] 1

$crosses
[1] 1

$saltires
[1] 1

$quarters
[1] 1

$sunstars
[1] 0

$crescent
[1] 1

$triangle
[1] 1

$icon
[1] 0

$animate
[1] 1

$text
[1] 1

$topleft
[1] red
Levels: black blue gold green orange red white

$botright
[1] red
Levels: black blue brown gold green orange red white


| You are amazing!

  |==========================================================================================================    |  96%
| The only difference between previous examples and this one is that we
| are defining and using our own function right in the call to lapply().
| Our function has no name and disappears as soon as lapply() is done
| using it. So-called 'anonymous functions' can be very useful when one
| of R's built-in functions isn't an option.

...

  |============================================================================================================  |  98%
| In this lesson, you learned how to use the powerful lapply() and
| sapply() functions to apply an operation over the elements of a list.
| In the next lesson, we'll take a look at some close relatives of
| lapply() and sapply().

...

  |==============================================================================================================| 100%
| Would you like to receive credit for completing this course on
| Coursera.org?

1: No
2: Yes


Tapply and Vapply:
---------------------------

...

  |===                                                             |   4%
| In this lesson, you'll learn how to use vapply() and tapply(), each of which serves a very specific purpose within
| the Split-Apply-Combine methodology. For consistency, we'll use the same dataset we used in the 'lapply and sapply'
| lesson.

...

  |=====                                                           |   8%
| The Flags dataset from the UCI Machine Learning Repository contains details of various nations and their flags. More
| information may be found here: http://archive.ics.uci.edu/ml/datasets/Flags

...

  |========                                                        |  12%
| I've stored the data in a variable called flags. If it's been a while since you completed the 'lapply and sapply'
| lesson, you may want to reacquaint yourself with the data by using functions like dim(), head(), str(), and summary()
| when you return to the prompt (>). You can also type viewinfo() at the prompt to bring up some documentation for the
| dataset. Let's get started!

...

  |==========                                                      |  16%
| As you saw in the last lesson, the unique() function returns a vector of the unique values contained in the object
| passed to it. Therefore, sapply(flags, unique) returns a list containing one vector of unique values for each column
| of the flags dataset. Try it again now.

> sapply(flags,unique)
$name
  [1] Afghanistan              Albania                  Algeria                  American-Samoa          
  [5] Andorra                  Angola                   Anguilla                 Antigua-Barbuda         
  [9] Argentina                Argentine                Australia                Austria                 
 [13] Bahamas                  Bahrain                  Bangladesh               Barbados                
 [17] Belgium                  Belize                   Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                  Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                   Bulgaria                 Burkina                 
 [29] Burma                    Burundi                  Cameroon                 Canada                  
 [33] Cape-Verde-Islands       Cayman-Islands           Central-African-Republic Chad                    
 [37] Chile                    China                    Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands             Costa-Rica               Cuba                    
 [45] Cyprus                   Czechoslovakia           Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic       Ecuador                  Egypt                   
 [53] El-Salvador              Equatorial-Guinea        Ethiopia                 Faeroes                 
 [57] Falklands-Malvinas       Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                    Gambia                  
 [65] Germany-DDR              Germany-FRG              Ghana                    Gibraltar               
 [69] Greece                   Greenland                Grenada                  Guam                    
 [73] Guatemala                Guinea                   Guinea-Bissau            Guyana                  
 [77] Haiti                    Honduras                 Hong-Kong                Hungary                 
 [81] Iceland                  India                    Indonesia                Iran                    
 [85] Iraq                     Ireland                  Israel                   Italy                   
 [89] Ivory-Coast              Jamaica                  Japan                    Jordan                  
 [93] Kampuchea                Kenya                    Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                  Lesotho                  Liberia                 
[101] Libya                    Liechtenstein            Luxembourg               Malagasy                
[105] Malawi                   Malaysia                 Maldive-Islands          Mali                    
[109] Malta                    Marianas                 Mauritania               Mauritius               
[113] Mexico                   Micronesia               Monaco                   Mongolia                
[117] Montserrat               Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles     New-Zealand             
[125] Nicaragua                Niger                    Nigeria                  Niue                    
[129] North-Korea              North-Yemen              Norway                   Oman                    
[133] Pakistan                 Panama                   Papua-New-Guinea         Parguay                 
[137] Peru                     Philippines              Poland                   Portugal                
[141] Puerto-Rico              Qatar                    Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                 Saudi-Arabia             Senegal                 
[149] Seychelles               Sierra-Leone             Singapore                Soloman-Islands         
[153] Somalia                  South-Africa             South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka                St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent               Sudan                    Surinam                 
[165] Swaziland                Sweden                   Switzerland              Syria                   
[169] Taiwan                   Tanzania                 Thailand                 Togo                    
[173] Tonga                    Trinidad-Tobago          Tunisia                  Turkey                  
[177] Turks-Cocos-Islands      Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles          USA                     
[185] USSR                     Vanuatu                  Vatican-City             Venezuela               
[189] Vietnam                  Western-Samoa            Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra Angola Anguilla Antigua-Barbuda Argentina ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31    23   113    47  1099   600  8512     6
 [20]   111   274   678    28   474  9976     4   623  1284   757  9561  1139     2   342    51   115     9   128    43
 [39]    22    49   284  1001    21  1222    12    18   337   547    91   268    10   108   249   239   132  2176   109
 [58]   246    36   215   112    93   103  3268  1904  1648   435    70   301   323    11   372    98   181   583   236
 [77]    30  1760     3   587   118   333  1240  1031  1973  1566   447   783   140    41  1267   925   121   195   324
 [96]   212   804    76   463   407  1285   300   313    92   237    26  2150   196    72   637  1221    99   288   505
[115]    66  2506    63    17   450   185   945   514    57     5   164   781   245   178  9363 22402    15   912   256
[134]   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35    4   24    2   11 1008    5   47   31
[24]   54   17   61   14  684  157   39   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45  231
[47]  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| That's correct!

  |=============                                                   |  20%
| What if you had forgotten how unique() works and mistakenly thought it returns the *number* of unique values
| contained in the object passed to it? Then you might have incorrectly expected sapply(flags, unique) to return a
| numeric vector, since each element of the list returned would contain a single number and sapply() could then
| simplify the result to a vector.

...

  |===============                                                 |  24%
| When working interactively (at the prompt), this is not much of a problem, since you see the result immediately and
| will quickly recognize your mistake. However, when working non-interactively (e.g. writing your own functions), a
| misunderstanding may go undetected and cause incorrect results later on. Therefore, you may wish to be more careful
| and that's where vapply() is useful.

...

  |==================                                              |  28%
| Whereas sapply() tries to 'guess' the correct format of the result, vapply() allows you to specify it explicitly. If
| the result doesn't match the format you specify, vapply() will throw an error, causing the operation to stop. This
| can prevent significant problems in your code that might be caused by getting unexpected return values from sapply().

...

  |====================                                            |  32%
| Try vapply(flags, unique, numeric(1)), which says that you expect each element of the result to be a numeric vector
| of length 1. Since this is NOT actually the case, YOU WILL GET AN ERROR. Once you get the error, type ok() to
| continue to the next question.

> vapply(flags,unique,numeric(1))
Error in vapply(flags, unique, numeric(1)) : values must be length 1,
 but FUN(X[[1]]) result is length 194
> 
> ok()

| Excellent work!

  |=======================                                         |  36%
| Recall from the previous lesson that sapply(flags, class) will return a character vector containing the class of each
| column in the dataset. Try that again now to see the result.

> sapply(flags,class)
      name   landmass       zone       area population   language   religion       bars    stripes    colours 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
       red      green       blue       gold      white      black     orange    mainhue    circles    crosses 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"   "factor"  "integer"  "integer" 
  saltires   quarters   sunstars   crescent   triangle       icon    animate       text    topleft   botright 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"   "factor"   "factor" 

| That's correct!

  |==========================                                      |  40%
| If we wish to be explicit about the format of the result we expect, we can use vapply(flags, class, character(1)).
| The 'character(1)' argument tells R that we expect the class function to return a character vector of length 1 when
| applied to EACH column of the flags dataset. Try it now.

> sapply(flags,class,character(1))
Error in FUN(X[[i]], ...) : 
  2 arguments passed to 'class' which requires 1
> ok()

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| Use vapply(flags, class, character(1)) to return a character vector of column classes.

> vapply(flags,class,character(1))
      name   landmass       zone       area population   language   religion       bars    stripes    colours 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
       red      green       blue       gold      white      black     orange    mainhue    circles    crosses 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"   "factor"  "integer"  "integer" 
  saltires   quarters   sunstars   crescent   triangle       icon    animate       text    topleft   botright 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"   "factor"   "factor" 

| That's correct!

  |============================                                    |  44%
| Note that since our expectation was correct (i.e. character(1)), the vapply() result is identical to the sapply()
| result -- a character vector of column classes.

...

  |===============================                                 |  48%
| You might think of vapply() as being 'safer' than sapply(), since it requires you to specify the format of the output
| in advance, instead of just allowing R to 'guess' what you wanted. In addition, vapply() may perform faster than
| sapply() for large datasets. However, when doing data analysis interactively (at the prompt), sapply() saves you some
| typing and will often be good enough.

...

  |=================================                               |  52%
| As a data analyst, you'll often wish to split your data up into groups based on the value of some variable, then
| apply a function to the members of each group. The next function we'll look at, tapply(), does exactly that.

...

  |====================================                            |  56%
| Use ?tapply to pull up the documentation.

> ?tapply(vector, index, function)
Error: unexpected ')' in "?tapply(vector, index, function)"
> ok()

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more options.

| Pull up the help file with ?tapply.

> ?tapply

| Perseverance, that's the answer.

  |======================================                          |  60%
| The 'landmass' variable in our dataset takes on integer values between 1 and 6, each of which represents a different
| part of the world. Use table(flags$landmass) to see how many flags/countries fall into each group.

> table(flags$landmass)

 1  2  3  4  5  6 
31 17 35 52 39 20 

| That's a job well done!

  |=========================================                       |  64%
| The 'animate' variable in our dataset takes the value 1 if a country's flag contains an animate image (e.g. an eagle,
| a tree, a human hand) and 0 otherwise. Use table(flags$animate) to see how many flags contain an animate image.

> table(flags$animate)

  0   1 
155  39 

| Perseverance, that's the answer.

  |============================================                    |  68%
| This tells us that 39 flags contain an animate object (animate = 1) and 155 do not (animate = 0).

...

  |==============================================                  |  72%
| If you take the arithmetic mean of a bunch of 0s and 1s, you get the proportion of 1s. Use tapply(flags$animate,
| flags$landmass, mean) to apply the mean function to the 'animate' variable separately for each of the six landmass
| groups, thus giving us the proportion of flags containing an animate image WITHIN each landmass group.

> tapply(flags$animate,flags$landmass,mean)
        1         2         3         4         5         6 
0.4193548 0.1764706 0.1142857 0.1346154 0.1538462 0.3000000 

| You are quite good my friend!

  |=================================================               |  76%
| The first landmass group (landmass = 1) corresponds to North America and contains the highest proportion of flags
| with an animate image (0.4194).

...

  |===================================================             |  80%
| Similarly, we can look at a summary of population values (in round millions) for countries with and without the color
| red on their flag with tapply(flags$population, flags$red, summary).

> tapply(flags$population,flags$red,summary)
$`0`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    3.00   27.63    9.00  684.00 

$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0     0.0     4.0    22.1    15.0  1008.0 


| All that hard work is paying off!

  |======================================================          |  84%
| What is the median population (in millions) for countries *without* the color red on their flag?

1: 4.0
2: 27.6
3: 22.1
4: 0.0
5: 9.0
6: 3.0

Selection: 6

| You nailed it! Good job!

  |========================================================        |  88%
| Lastly, use the same approach to look at a summary of population values for each of the six landmasses.

> tapply(flags$population,flags$landmass,summary)
$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   12.29    4.50  231.00 

$`2`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    1.00    6.00   15.71   15.00  119.00 

$`3`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    8.00   13.86   16.00   61.00 

$`4`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   1.000   5.000   8.788   9.750  56.000 

$`5`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    2.00   10.00   69.18   39.00 1008.00 

$`6`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   11.30    1.25  157.00 


| You got it right!

  |===========================================================     |  92%
| What is the maximum population (in millions) for the fourth landmass group (Africa)?

1: 5.00
2: 157.00
3: 119.0
4: 1010.0
5: 56.00

Selection: 5

| You are quite good my friend!

  |=============================================================   |  96%
| In this lesson, you learned how to use vapply() as a safer alternative to sapply(), which is most helpful when
| writing your own functions. You also learned how to use tapply() to split your data into groups based on the value of
| some variable, then apply a function to each group. These functions will come in handy on your quest to become a
| better data analyst.

...

  |================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 2

| You are quite good my friend!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Functions
2: R Programming Logic
3: R Programming Subsetting Vectors
4: No. Let me start something new.

Selection:
